const fonts=["/static/font/IBMPlexMath-Regular.woff2","/static/font/IBMPlexMono-Bold.woff2","/static/font/IBMPlexMono-BoldItalic.woff2","/static/font/IBMPlexMono-Italic.woff2","/static/font/IBMPlexMono-Regular.woff2","/static/font/IBMPlexSans-Bold.woff2","/static/font/IBMPlexSans-BoldItalic.woff2","/static/font/IBMPlexSans-Italic.woff2","/static/font/IBMPlexSans-Regular.woff2","/static/font/IBMPlexSerif-Bold.woff2","/static/font/IBMPlexSerif-BoldItalic.woff2","/static/font/IBMPlexSerif-Italic.woff2","/static/font/IBMPlexSerif-Regular.woff2","/static/font/SourceHanSansSC-Bold.woff2","/static/font/SourceHanSansSC-Regular.woff2","/static/font/SourceHanSerifSC-Bold.woff2","/static/font/SourceHanSerifSC-Regular.woff2"],addResourcesToCache=async t=>{await(await caches.open("font-cache-v1")).addAll(t)},putInCache=async(t,e)=>{await(await caches.open("font-cache-v1")).put(t,e)},cacheFirst=async({request:t,preloadResponsePromise:e})=>{var a=await caches.match(t);if(a)return a;a=await e;if(a)return putInCache(t,a.clone()),a;try{var o=await fetch(t);return putInCache(t,o.clone()),o}catch(t){return new Response("Network error.",{status:408,headers:{"Content-Type":"text/plain"}})}},enableNavigationPreload=async()=>{self.registration.navigationPreload&&await self.registration.navigationPreload.enable()};self.addEventListener("activate",t=>{t.waitUntil(enableNavigationPreload())}),self.addEventListener("install",t=>{t.waitUntil(addResourcesToCache(fonts))}),self.addEventListener("fetch",t=>{fonts.includes(new URL(t.request.url).pathname)?t.respondWith(cacheFirst({request:t.request,preloadResponsePromise:t.preloadResponse})):t.respondWith(fetch(t.request))});
